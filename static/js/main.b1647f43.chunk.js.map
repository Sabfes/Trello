{"version":3,"sources":["redux/types/auth.ts","components/StyledComponents/StyledComponents.jsx","api/api.js","api/authApi.js","redux/actions/auth.ts","redux/types/curBoard.ts","components/Registration/Registration.jsx","components/Login/Login.jsx","components/NavBar/NavBar.jsx","components/HomePage/HomePage.jsx","api/curBoard.js","redux/actions/curBoard.ts","redux/types/board.ts","components/Boards/Task/Task.jsx","components/Boards/Column/Column.jsx","hooks/useTypedSelector.ts","components/Boards/Boards.jsx","components/Boards/onDragEnd.js","components/Modal/Modal.jsx","api/boardsApi.js","redux/actions/boards.ts","components/BoardsList/BoardSnippet/BoardSnippet.tsx","components/BoardsList/BoardList.jsx","App.tsx","redux/reducers/boardsReducer.ts","redux/reducers/authReducer.ts","redux/reducers/curBoardReducer.ts","redux/reducers/curTaskReducer.ts","redux/reducers/index.ts","redux/index.ts","index.tsx"],"names":["authActionsConstants","Row","styled","div","width","mt","ml","mr","mb","Col","Input","input","height","Button","button","color","bg","H2","h2","pointer","instance","axios","create","baseURL","headers","localStorage","getItem","authApi","get","username","password","post","email","role","curBoardActionsConstants","authToggle","isAuth","type","IS_AUTH_TOGGLE","payload","setUserId","id","SET_USER_ID","Registration","useState","login","setLogin","setPassword","setEmail","dispatch","useDispatch","submit","a","res","status","console","log","data","message","registrationMe","Wrap","Title","value","onChange","e","target","onClick","h1","Login","history","useHistory","placeholder","userName","setItem","token","loginMe","then","push","NavBar","useSelector","state","auth","Navbar","Link","to","Logo","NavLink","HomePage","curBoardApi","boardId","col","colId","delete","columnId","task","taskId","boardsActionsConstants","delColFromStore","DEL_COL","addTask","ADD_TASK","delTask","DELL_TASK","Task","item","index","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","userSelect","padding","margin","minHeight","backgroundColor","display","justifyContent","cursor","Column","delCol","columnName","inputActive","setInputActive","inputValue","setInputValue","addNewTask","trim","ColumnContainer","marginRight","droppableId","ColumnHeader","DelTask","ColumnMain","droppableProps","background","isDraggingOver","tasks","map","ColumnFooter","autoFocus","onBlur","onKeyPress","code","AddBtnTask","useTypedSelector","Board","location","pathname","slice","isLoading","setIsLoading","isInputOpen","setIsInputOpen","setColumnName","useEffect","board","SET_CUR_BOARD","getCurrentBoard","setTimeout","curBoard","addTaskHandler","taskText","uuid","addTaskToColumns","delColHandler","addColHandler","ADD_COL","addCol","Header","boardName","className","BoardContainer","onDragEnd","result","columns","destination","source","sourceColumn","filter","el","destColumn","sourceItems","destItems","splice","removed","copiedItems","key","AddColBtn","header","Modal","isModalOpen","setModalOpen","addBoard","modalRef","useRef","setBoardName","Window","boardsApi","userId","addBoardToStore","ADD_BOARD_TO_STORE","deleteBoardFromStore","DELETE_BOARD_FROM_STORE","getBoards","SET_BOARDS","BoardSnippet","delBoardHandler","BoardList","boards","deleteBoard","Container","nameOfBoard","BoardsContainer","nav","App","AppWrap","path","exact","component","Boards","initialState","taskInfo","rootReducer","combineReducers","action","newColsAfterDel","newColsAfterAdd","curTask","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1647f43.chunk.js","sourcesContent":["export enum authActionsConstants {\r\n    IS_AUTH_TOGGLE = 'IS_AUTH_TOGGLE',\r\n    SET_USER_ID = 'SET_USER_ID',\r\n}\r\n\r\nexport interface AuthState {\r\n    isAuth: boolean\r\n    userId: null | number\r\n}\r\n\r\nexport interface authToggleType {\r\n    type: authActionsConstants.IS_AUTH_TOGGLE\r\n    payload: boolean\r\n}\r\n\r\nexport interface setUserIdType {\r\n    type: authActionsConstants.SET_USER_ID\r\n    payload: number\r\n}\r\n\r\nexport type AuthActions = setUserIdType | authToggleType\r\n","import styled from \"styled-components\";\r\n\r\nexport const Row = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    \r\n    width: ${({width}) => width ? width + 'px' : ''};\r\n    \r\n    margin-top: ${({mt}) => mt ? mt + 'px' : '0px' };\r\n    margin-left: ${({ml}) => ml ? ml + 'px' : '0px' };\r\n    margin-right: ${({mr}) => mr ? mr + 'px' : '0px' };\r\n    margin-bottom: ${({mb}) => mb ? mb + 'px' : '0px' };\r\n`\r\n\r\nexport const Col = styled.div`\r\n    display: flex;\r\n    flex-direction: column;    \r\n    justify-content: center;\r\n    \r\n    margin-top: ${({mt}) => mt ? mt + 'px' : '0px' };\r\n    margin-left: ${({ml}) => ml ? ml + 'px' : '0px' };\r\n    margin-right: ${({mr}) => mr ? mr + 'px' : '0px' };\r\n    margin-bottom: ${({mb}) => mb ? mb + 'px' : '0px' };\r\n`\r\n\r\nexport const Input = styled.input`\r\n    border: 1px solid grey;\r\n    padding: 10px;\r\n    outline: none;\r\n    color: grey;\r\n    font-weight: 300;\r\n    font-size: 15px;\r\n    height: ${({height}) => height ? height + 'px' : '50px'};\r\n    width: ${({width}) => width ? width + 'px' : '300px'};\r\n`\r\n\r\nexport const Button = styled.button`\r\n    min-width: 100px;\r\n    width: ${({width}) => width ? width + 'px' : ''};\r\n    height: 40px;\r\n    color: ${({color}) => color ? color : 'black'};\r\n    outline: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid grey;\r\n    cursor: pointer;\r\n    background: ${({bg}) => bg ? bg : 'white' };\r\n    \r\n    margin-top: ${({mt}) => mt ? mt + 'px' : '0px' };\r\n    margin-left: ${({ml}) => ml ? ml + 'px' : '0px' };\r\n    margin-right: ${({mr}) => mr ? mr + 'px' : '0px' };\r\n    margin-bottom: ${({mb}) => mb ? mb + 'px' : '0px' };\r\n`\r\n\r\nexport const H2 = styled.h2`\r\n    font-weight: 300;\r\n    font-size: 20px;\r\n    color: black;\r\n    cursor: ${({pointer}) => pointer ? 'pointer' : 'default'};\r\n    \r\n    margin-top: ${({mt}) => mt ? mt + 'px' : '0px' };\r\n    margin-left: ${({ml}) => ml ? ml + 'px' : '0px' };\r\n    margin-right: ${({mr}) => mr ? mr + 'px' : '0px' };\r\n    margin-bottom: ${({mb}) => mb ? mb + 'px' : '0px' };\r\n`\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://sabfesapp.herokuapp.com/api/',\r\n    headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n    }\r\n})\r\n","import {instance} from \"./api\";\r\n\r\nexport const authApi = {\r\n    getAuth: ()=> {\r\n        return instance.get('auth')\r\n    },\r\n    login: (username, password) => {\r\n        return instance.post(`auth/signin`, {username, password})\r\n    },\r\n    registration: (username, password, email, role) => {\r\n        return instance.post(`auth/signup`, {username, password, email, role})\r\n    }\r\n};\r\n","import {authApi} from \"../../api/authApi\";\r\nimport {AuthActions, authActionsConstants, authToggleType, setUserIdType} from \"../types/auth\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//ACTIONS\r\nexport const authToggle = (isAuth: boolean): authToggleType => {\r\n    return {\r\n        type: authActionsConstants.IS_AUTH_TOGGLE,\r\n        payload: isAuth,\r\n    }\r\n}\r\n\r\nexport const setUserId = (id: number): setUserIdType => {\r\n    return {\r\n        type: authActionsConstants.SET_USER_ID,\r\n        payload: id\r\n    }\r\n}\r\n\r\n//THUNK\r\nexport const authMe = () => async (dispatch: Dispatch<AuthActions>) => {\r\n    const res = await authApi.getAuth()\r\n\r\n    if (res.status === 200) {\r\n        dispatch(authToggle(true))\r\n        dispatch(setUserId(res.data.message))\r\n    }\r\n}\r\n\r\nexport const loginMe = (userName: string, password: string) => async (dispatch: Dispatch<AuthActions>) => {\r\n    const res = await authApi.login(userName, password)\r\n\r\n    if (res.status === 200) {\r\n        localStorage.setItem('token', res.data.token)\r\n        dispatch(authToggle(true))\r\n        dispatch(setUserId(res.data.id))\r\n\r\n        return true\r\n    }\r\n}\r\n\r\nexport const registrationMe = (login: string, password: string, email: string, role: string[]) => async () => {\r\n    try {\r\n        const res = await authApi.registration(login, password, email, role)\r\n\r\n        if (res.status === 200) {\r\n            console.log(res.data.message)\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n","import {IBoard, IColumn, ITask} from \"./board\";\r\n\r\nexport enum curBoardActionsConstants {\r\n    ADD_COL = 'ADD_COL',\r\n    DEL_COL = 'DEL_COL',\r\n    SET_CUR_BOARD = 'SET_CUR_BOARD',\r\n    ADD_TASK =  'ADD_TASK',\r\n    DELL_TASK = 'DELL_TASK',\r\n}\r\n\r\nexport interface CurBoardState {\r\n    columns: IColumn[],\r\n    boardName: string\r\n}\r\n\r\nexport type dataColType = {\r\n    boardId: string,\r\n    col: IColumn,\r\n}\r\n\r\nexport interface AddColToStoreType {\r\n    type: curBoardActionsConstants.ADD_COL,\r\n    payload: dataColType,\r\n}\r\n\r\nexport interface DelColFromStoreType {\r\n    type: curBoardActionsConstants.DEL_COL,\r\n    payload: string\r\n}\r\n\r\nexport interface AddTaskType {\r\n    type: curBoardActionsConstants.ADD_TASK,\r\n    payload: {\r\n        columnId: string,\r\n        task: ITask\r\n    },\r\n}\r\n\r\nexport interface DelTaskType {\r\n    type: curBoardActionsConstants.DELL_TASK,\r\n    payload: {\r\n        columnId: string,\r\n        taskId: string,\r\n    }\r\n}\r\n\r\nexport interface SetCurBoardType {\r\n    type: curBoardActionsConstants.SET_CUR_BOARD,\r\n    payload: IBoard\r\n}\r\n\r\nexport type CurBoardActions = AddColToStoreType | DelColFromStoreType |\r\n    DelTaskType | AddTaskType | SetCurBoardType\r\n","import React, {useState} from \"react\"\r\nimport {Button, Col, Input} from \"../StyledComponents/StyledComponents\";\r\nimport styled from 'styled-components'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {registrationMe} from \"../../redux/actions/auth\";\r\n\r\nconst Registration = () => {\r\n    const [login, setLogin] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const submit = (login, password, email) => {\r\n        const role = ['user']\r\n\r\n        dispatch(registrationMe(login, password, email, role))\r\n    }\r\n\r\n    return <Wrap>\r\n        <Title>Регистрация</Title>\r\n\r\n        <Col>\r\n            <span>Логин</span>\r\n            <Input type={\"text\"} value={login} onChange={(e) => setLogin(e.target.value)}/>\r\n            <span>Пароль</span>\r\n            <Input type={\"password\"} value={password} onChange={(e) => setPassword(e.target.value)}/>\r\n            <span>Емейл</span>\r\n            <Input type={\"email\"} value={email} onChange={(e) => setEmail(e.target.value)}/>\r\n            <Button bg={\"#0051cc\"} color={'white'} onClick={() => submit(login, password, email)}>Зарегистрироваться</Button>\r\n        </Col>\r\n    </Wrap>\r\n}\r\nexport default Registration\r\n\r\nconst Title = styled.h1`\r\n    font-weight: 300;\r\n    font-size: 40px;\r\n`\r\n\r\nconst Wrap = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    height: 60%;\r\n`\r\n","import React, {useState} from \"react\"\r\nimport {Button, Col, Input} from \"../StyledComponents/StyledComponents\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginMe} from \"../../redux/actions/auth\";\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nconst Login = () => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const [login, setLogin] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const loginHandler = () => {\r\n        dispatch(loginMe(login, password))\r\n            .then( res => {\r\n                if (res) {\r\n                    history.push('/boardsList')\r\n                }\r\n            })\r\n    }\r\n\r\n    return <Wrap>\r\n        <Title>Логин</Title>\r\n\r\n        <Col>\r\n            <span>Логин</span>\r\n            <Input\r\n                placeholder={\"Логин\"}\r\n                value={login} onChange={(e) => setLogin(e.target.value)}\r\n            />\r\n            <span>Пароль</span>\r\n            <Input\r\n                placeholder={\"Пароль\"}\r\n                value={password} onChange={(e) => setPassword(e.target.value)}\r\n                type={\"password\"}\r\n            />\r\n\r\n            <Button bg={\"#0051cc\"} color={'white'}\r\n                    onClick={loginHandler}\r\n            >Войти</Button>\r\n        </Col>\r\n    </Wrap>\r\n}\r\nexport default Login\r\n\r\nconst Wrap = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    height: 60%;\r\n`\r\n\r\nconst Title = styled.h1`\r\n    font-weight: 300;\r\n    font-size: 40px;\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Row} from \"../StyledComponents/StyledComponents\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {authToggle} from \"../../redux/actions/auth\";\r\n\r\nconst NavBar = () => {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector(state => state.auth.isAuth)\r\n\r\n    return <Navbar>\r\n        <Link to={\"/\"}><Logo>Trello</Logo></Link>\r\n\r\n        <Row mr={10}>\r\n            {\r\n                isAuth\r\n                    ?   <Link to={\"/\"} onClick={() => dispatch(authToggle(false))}>Выйти</Link>\r\n                    :   <>\r\n                        <Link to={\"/registration\"}>Регистрация</Link>\r\n                        <Link to={\"/login\"}>Логин</Link>\r\n                    </>\r\n            }\r\n        </Row>\r\n    </Navbar>\r\n}\r\nexport default NavBar\r\n\r\nconst Navbar = styled.div`\r\n    display: flex;\r\n    height: 5vh;\r\n    align-items: center;   \r\n    justify-content: space-between;\r\n`\r\nconst Link = styled(NavLink)`\r\n    text-decoration: none;\r\n    color: black;\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n    font-weight: 300;\r\n    margin-right: 10px;\r\n    \r\n    &:last-of-type {\r\n        margin-right: 0px;\r\n    }\r\n`\r\n\r\nconst Logo = styled.h1`\r\n    font-size: 25px;\r\n    font-weight: 300;\r\n    margin-left: 10px;\r\n    cursor: pointer;\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\";\r\n\r\nconst HomePage = () => {\r\n    return <Wrap>\r\n        <Title>Trello</Title>\r\n    </Wrap>\r\n}\r\nexport default HomePage\r\n\r\nconst Wrap = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center; \r\n    height: 70%;  \r\n`\r\nconst Title = styled.h1`\r\n    font-size: 140px;\r\n    font-weight: 300;\r\n`\r\n","import {instance} from \"./api\";\r\n\r\nexport const curBoardApi = {\r\n    getCurBoard: (boardId) => {\r\n        return instance.get(`board/getone/${boardId}`)\r\n    },\r\n    addCol: (boardId, col) => {\r\n        return instance.post(`board/col/${boardId}`, col)\r\n    },\r\n    delCol: (colId) => {\r\n        return instance.delete(`board/col/${colId}`)\r\n    },\r\n    addTask: (columnId, task) => {\r\n        return instance.post(`/board/task/${columnId}`, task)\r\n    },\r\n    delTask: (taskId) => {\r\n        return instance.delete(`board/task/${taskId}`)\r\n    }\r\n};\r\n","import {curBoardApi} from \"../../api/curBoard\";\r\n// @ts-ignore\r\nimport uuid from \"react-uuid\";\r\nimport {\r\n    AddColToStoreType,\r\n    AddTaskType, CurBoardActions,\r\n    curBoardActionsConstants,\r\n    dataColType,\r\n    DelColFromStoreType, DelTaskType, SetCurBoardType\r\n} from \"../types/curBoard\";\r\nimport {IBoard, IColumn, ITask} from \"../types/board\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//ACTION\r\nexport const addColToStore = (data: dataColType): AddColToStoreType => {\r\n    return {\r\n        type: curBoardActionsConstants.ADD_COL,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const delColFromStore = (colId: string): DelColFromStoreType => {\r\n    return {\r\n        type: curBoardActionsConstants.DEL_COL,\r\n        payload: colId\r\n    }\r\n}\r\n\r\nexport const setCurBoard = (board: IBoard): SetCurBoardType => {\r\n    return {\r\n        type: curBoardActionsConstants.SET_CUR_BOARD,\r\n        payload: board\r\n    }\r\n}\r\n\r\nexport const addTask = (columnId: string, task: ITask): AddTaskType => {\r\n    return {\r\n        type: curBoardActionsConstants.ADD_TASK,\r\n        payload: {columnId, task}\r\n    }\r\n}\r\n\r\nexport const delTask = (columnId: string, taskId: string): DelTaskType => {\r\n    return {\r\n        type: curBoardActionsConstants.DELL_TASK,\r\n        payload: {columnId, taskId}\r\n    }\r\n}\r\n\r\n//THUNK\r\nexport const dellTaskFromColumns = (columnId: string, taskId: string) => async (dispatch: Dispatch<CurBoardActions>) => {\r\n    try {\r\n        const res = await curBoardApi.delTask(taskId)\r\n\r\n        if (res.status === 200) {\r\n            dispatch(delTask(columnId, taskId))\r\n        }\r\n    }catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const addTaskToColumns = (columnId: string, taskText: string) => async (dispatch: Dispatch<CurBoardActions>) => {\r\n    try {\r\n        const task = {task: taskText, id: uuid()}\r\n        const res = await curBoardApi.addTask(columnId, task)\r\n\r\n        if (res.status === 200) {\r\n            dispatch(addTask(columnId, task))\r\n        }\r\n    }catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const getCurrentBoard = (boardId: string) => async (dispatch: Dispatch<CurBoardActions>) => {\r\n    try {\r\n        const res = await curBoardApi.getCurBoard(boardId)\r\n\r\n        if (res.status === 200) {\r\n            dispatch(setCurBoard(res.data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const delCol = (boardId: string, colId: string) => async (dispatch: Dispatch<CurBoardActions>) => {\r\n    const res = await curBoardApi.delCol(colId)\r\n\r\n    if (res.status === 200) {\r\n        dispatch(delColFromStore(colId))\r\n    }\r\n}\r\n\r\nexport const addCol = (boardId: string, col: IColumn) => async (dispatch: Dispatch<CurBoardActions>) => {\r\n    const res = await curBoardApi.addCol(boardId, col)\r\n\r\n    if (res.status === 200) {\r\n        dispatch(addColToStore({boardId, col}))\r\n    }\r\n}\r\n","export enum boardsActionsConstants {\r\n    SET_BOARDS = 'SET_BOARDS',\r\n    ADD_BOARD_TO_STORE = 'ADD_BOARD_TO_STORE',\r\n    DELETE_BOARD_FROM_STORE = 'DELETE_BOARD_FROM_STORE',\r\n}\r\n\r\nexport interface ITask {\r\n    task: string,\r\n    id: string\r\n}\r\n\r\nexport interface IColumn {\r\n    columnName: string,\r\n    id: string,\r\n    tasks: ITask[],\r\n}\r\n\r\nexport interface IBoard {\r\n    boardName: string,\r\n    id: string,\r\n    columns: IColumn[]\r\n}\r\n\r\nexport interface BoardsState {\r\n    boards: IBoard[],\r\n}\r\n\r\nexport interface setBoardsType {\r\n    type: boardsActionsConstants.SET_BOARDS,\r\n    payload: IBoard[]\r\n}\r\n\r\nexport interface addBoardToStoreType {\r\n    type: boardsActionsConstants.ADD_BOARD_TO_STORE,\r\n    payload: IBoard\r\n}\r\n\r\nexport interface deleteBoardFromStoreType {\r\n    type: boardsActionsConstants.DELETE_BOARD_FROM_STORE,\r\n    payload: string\r\n}\r\n\r\nexport type BoardsActions = deleteBoardFromStoreType | addBoardToStoreType | setBoardsType\r\n","import React from \"react\"\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {Row} from \"../../StyledComponents/StyledComponents\";\r\nimport {dellTaskFromColumns} from \"../../../redux/actions/curBoard\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst Task = ({item, index,colId}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    return <Draggable\r\n        key={item.id}\r\n        draggableId={item.id}\r\n        index={index}\r\n    >\r\n        {(provided, snapshot) => {\r\n            return (\r\n                <Row>\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={{\r\n                            width: '100%',\r\n                            userSelect: \"none\",\r\n                            padding: 16,\r\n                            margin: \"0 0 8px 0\",\r\n                            minHeight: \"50px\",\r\n                            backgroundColor: \"white\",\r\n                            color: \"black\",\r\n                            ...provided.draggableProps.style\r\n                        }}\r\n                    >\r\n                        <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            {item.task}\r\n                            <span\r\n                                onClick={(e) => {\r\n                                    dispatch(dellTaskFromColumns(colId, item.id))\r\n                                }}\r\n                                style={{cursor: \"pointer\"}}\r\n                            >\r\n                            X\r\n                        </span>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n            );\r\n        }}\r\n    </Draggable>\r\n}\r\nexport default Task\r\n","import React, {useState} from \"react\"\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport Task from \"../Task/Task\";\r\nimport styled from \"styled-components\";\r\nimport {Input, Row} from \"../../StyledComponents/StyledComponents\";\r\n\r\nconst Column = ({col,delCol, addTask,columnName}) => {\r\n    const [inputActive, setInputActive] = useState(false)\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const addNewTask = () => {\r\n        if (inputValue.trim() !== '') {\r\n            addTask(col.id, inputValue)\r\n            setInputActive(false)\r\n            setInputValue('')\r\n        }\r\n    }\r\n\r\n    return  <ColumnContainer\r\n        key={col.id}\r\n    >\r\n        <div style={{ marginRight: \"5px\"}}>\r\n            <Droppable droppableId={col.id} key={col.id}>\r\n                {(provided, snapshot) => {\r\n                    return (\r\n                        <div>\r\n                            <ColumnHeader>\r\n                                <span>{columnName}</span>\r\n\r\n                                <Row>\r\n                                    <DelTask onClick={() => delCol(col.id)}>x</DelTask>\r\n                                </Row>\r\n                            </ColumnHeader>\r\n                            <ColumnMain\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                style={{\r\n                                    background: snapshot.isDraggingOver\r\n                                        ? \"#091E420A\"\r\n                                        : \"#ebecf0\",\r\n                                    padding: 4,\r\n                                    width: 250,\r\n                                    minHeight: 80,\r\n                                }}\r\n                            >\r\n                                {col.tasks.map((item, index) => {\r\n                                    return <Task\r\n                                        key={index}\r\n                                        item={item}\r\n                                        index={index}\r\n                                        colId={col.id}\r\n                                    />\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ColumnMain>\r\n                            <ColumnFooter>\r\n                                {\r\n                                    inputActive\r\n                                        ? <Input\r\n                                            autoFocus\r\n                                            value={inputValue}\r\n                                            onChange={(e) => setInputValue(e.target.value)}\r\n                                            width={240}\r\n                                            height={40}\r\n                                            placeholder=\"Название задания\"\r\n                                            onBlur={addNewTask}\r\n                                            onKeyPress={(e) => {\r\n                                                if (e.code === \"Enter\") {\r\n                                                    addNewTask()\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                        : <AddBtnTask\r\n                                            onClick={() => setInputActive(true)}\r\n                                        >+ Добавить задание</AddBtnTask>\r\n                                }\r\n                            </ColumnFooter>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Droppable>\r\n        </div>\r\n    </ColumnContainer>\r\n}\r\nexport default Column\r\n\r\nconst AddBtnTask = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 40px;\r\n    border-radius: 3px;\r\n    width: 100%;\r\n   \r\n    \r\n    &:hover {\r\n        cursor: pointer;\r\n        background: lightgrey;\r\n    }\r\n`\r\n\r\nconst ColumnFooter = styled.div`\r\n    background: #ebecf0;\r\n    padding: 5px;\r\n`\r\n\r\nconst ColumnMain = styled.div`\r\n    overflow-y: scroll;\r\n    height: 73vh;\r\n    \r\n    ::-webkit-scrollbar {\r\n        width: 8px; \r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: #DCDCDC;\r\n        border-radius: 10px;\r\n    }\r\n`\r\n\r\nconst ColumnContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-left: 10px;\r\n    height: 95%;\r\n`\r\n\r\nconst DelTask = styled.div`\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n`\r\n\r\nconst ColumnHeader = styled.div`\r\n    border-radius: 5px 5px 0 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    background: #ebecf0;\r\n    font-weight: 300;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    text-align: center;\r\n    height: 50px;\r\n`\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from '../redux/reducers/index'\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {DragDropContext} from \"react-beautiful-dnd\";\r\nimport uuid from \"react-uuid\";\r\nimport {onDragEnd} from \"./onDragEnd\";\r\nimport Column from \"./Column/Column\";\r\nimport styled from \"styled-components\";\r\nimport {NavLink, useHistory} from 'react-router-dom'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addCol, addTaskToColumns, delCol, getCurrentBoard} from \"../../redux/actions/curBoard\";\r\nimport {H2, Input} from \"../StyledComponents/StyledComponents\";\r\nimport {useTypedSelector} from \"../../hooks/useTypedSelector\";\r\n\r\n\r\nconst Board = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const boardId = history.location.pathname.slice(8)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [isInputOpen, setIsInputOpen] = useState(false)\r\n    const [columnName, setColumnName] = useState('')\r\n\r\n    useEffect(() => {\r\n        dispatch(getCurrentBoard(boardId))\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 500)\r\n    }, [boardId, dispatch])\r\n    const board = useTypedSelector(state => state.curBoard)\r\n\r\n    const addTaskHandler = (colId, taskText) => {\r\n        dispatch(addTaskToColumns(colId, taskText))\r\n    }\r\n\r\n    const delColHandler = (colId) => {\r\n        dispatch(delCol(boardId, colId))\r\n    }\r\n    const addColHandler = (columnName) => {\r\n        const col = {\r\n            id: uuid(),\r\n            columnName: columnName,\r\n            tasks: []\r\n        }\r\n        if (columnName !== '') {\r\n            dispatch(addCol(boardId, col))\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Header>\r\n                <H2 ml={10} mr={15}>{board.boardName}</H2>\r\n                <NavLink className=\"link\" to={\"/boardsList\"}><H2 pointer mr={15}>Список досок</H2></NavLink>\r\n                <H2 mr={15}>Добавить в избраное</H2>\r\n                <H2>Настройки</H2>\r\n            </Header>\r\n            {\r\n                isLoading\r\n                    ? <div>...loading</div>\r\n                    : <BoardContainer>\r\n                        <DragDropContext\r\n                            onDragEnd={result => onDragEnd(result, board.columns)}\r\n                        >\r\n                            {board.columns.map((col, index) => {\r\n                                return <Column\r\n                                    columnName={col.columnName}\r\n                                    delCol={delColHandler}\r\n                                    addTask={addTaskHandler}\r\n                                    col={col}\r\n                                    key={index}\r\n                                />\r\n                            })}\r\n                            {\r\n                                isInputOpen\r\n                                    // Инпуты добавления новой колонки\r\n                                    ? <Input\r\n                                        placeholder=\"Введите название колонки\"\r\n                                        autoFocus\r\n                                        onKeyPress={(e) => {\r\n                                            if (e.key === \"Enter\") {\r\n                                                addColHandler(columnName.trim())\r\n                                                setColumnName('')\r\n                                                setIsInputOpen(false)\r\n                                            }\r\n                                        }}\r\n                                        onBlur={() => {\r\n                                            if (columnName === '') {\r\n                                                setIsInputOpen(false)\r\n                                            } else {\r\n                                                addColHandler(columnName.trim())\r\n                                                setColumnName('')\r\n                                                setIsInputOpen(false)\r\n                                            }\r\n                                        }}\r\n                                        width={250}\r\n                                        height={50}\r\n                                        value={columnName}\r\n                                        onChange={(e) => setColumnName(e.target.value)}\r\n                                    />\r\n                                    : <AddColBtn\r\n                                        onClick={() => setIsInputOpen(true)}\r\n                                    >\r\n                                        Добавить новую колонку +\r\n                                    </AddColBtn>\r\n\r\n                            }\r\n                        </DragDropContext>\r\n                    </BoardContainer>\r\n            }\r\n        </>\r\n    );\r\n}\r\nexport default Board;\r\n\r\nconst Header = styled.header`\r\n    height: 5vh;\r\n    display: flex;\r\n    \r\n`\r\n\r\nconst AddColBtn = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-width: 250px;\r\n    height: 50px;\r\n    border-radius: 1px;\r\n    color: black;\r\n    background: #EBECF0;\r\n    cursor: pointer;\r\n`\r\n\r\nconst BoardContainer = styled.div`\r\n    display: flex; \r\n    justifyContent: flex-start;\r\n    height: 90vh;\r\n    overflow-x: scroll;\r\n    \r\n    ::-webkit-scrollbar {\r\n        width: 24px; /* ширина для вертикального скролла */\r\n        height: 10px; /* высота для горизонтального скролла */\r\n        background: #DCDCDC;\r\n    }\r\n    \r\n    /* ползунок скроллбара */\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: darkgrey;\r\n        border-radius: 9em;\r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background-color: grey;\r\n    }\r\n`\r\n","export const onDragEnd = (result, columns) => {\r\n    if (!result.destination) return;\r\n    const { source, destination } = result;\r\n\r\n    if (source.droppableId !== destination.droppableId) {\r\n        const sourceColumn = columns.filter(el => el.id === source.droppableId);\r\n        const destColumn = columns.filter(el => el.id === destination.droppableId);\r\n        const sourceItems = sourceColumn[0].tasks;\r\n        const destItems = destColumn[0].tasks;\r\n        const [removed] = sourceItems.splice(source.index, 1);\r\n        destItems.splice(destination.index, 0, removed);\r\n    } else {\r\n        const column = columns.filter(el => el.id === source.droppableId);\r\n        const copiedItems = column[0].tasks;\r\n        const [removed] = copiedItems.splice(source.index, 1);\r\n        copiedItems.splice(destination.index, 0, removed);\r\n    }\r\n};\r\n","import React, {useRef, useState} from \"react\"\r\nimport styled from \"styled-components\";\r\nimport {Button, Col, H2, Input, Row} from \"../StyledComponents/StyledComponents\";\r\n\r\nconst Modal = ({isModalOpen, setModalOpen, addBoard}) => {\r\n    const modalRef = useRef(null)\r\n    const [boardName, setBoardName] = useState('')\r\n\r\n    return <Wrap isModalOpen={isModalOpen}>\r\n        <Window ref={modalRef}>\r\n            <Col>\r\n                <Row mt={50} ml={50}>\r\n                    <H2>Создние доски</H2>\r\n                    <H2 ml={90} onClick={() => setModalOpen(false)}>Закрыть</H2>\r\n                </Row>\r\n                <Col ml={50} mt={20}>\r\n                    <H2 mt={20} mb={10}>Название доски</H2>\r\n                    <Input  value={boardName} onChange={ (e) => setBoardName(e.target.value)}/>\r\n                    <Button onClick={() => {\r\n                        addBoard(boardName)\r\n                        setBoardName('')\r\n                    }} mt={10} width={300} color={\"white\"} bg={\"#0051cc\"}>Создать доску</Button>\r\n                </Col>\r\n            </Col>\r\n\r\n        </Window>\r\n    </Wrap>\r\n}\r\n\r\nexport default Modal\r\n\r\nconst Window = styled.div`\r\n    border-radius: 20px;\r\n    display: block;\r\n    width: 400px;\r\n    height: 300px;\r\n    background: white;\r\n`\r\n\r\nconst Wrap = styled.div`\r\n    display: ${({isModalOpen}) => isModalOpen ? 'flex' : 'none'};\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0,0,0, .4);\r\n    z-index: 100;\r\n`\r\n","import {instance} from \"./api\";\r\n\r\nexport const boardsApi = {\r\n    getBoards: (userId) => {\r\n        return instance.get(`board/${userId}`)\r\n    },\r\n    addBoard: (userId, board) => {\r\n        return instance.post(`board/${userId}`, board)\r\n    },\r\n    delBoard: (boardId) => {\r\n        return instance.delete(`board/${boardId}`)\r\n    },\r\n};\r\n","import {boardsApi} from \"../../api/boardsApi\";\r\n// @ts-ignore\r\nimport uuid from \"react-uuid\";\r\nimport {\r\n    addBoardToStoreType,\r\n    BoardsActions,\r\n    boardsActionsConstants,\r\n    deleteBoardFromStoreType,\r\n    IBoard,\r\n    setBoardsType\r\n} from \"../types/board\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n//ACTIONS\r\nexport const setBoards = (data: IBoard[]): setBoardsType => {\r\n    return {\r\n        type: boardsActionsConstants.SET_BOARDS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const addBoardToStore = (board: IBoard): addBoardToStoreType => {\r\n    return {\r\n        type: boardsActionsConstants.ADD_BOARD_TO_STORE,\r\n        payload: board\r\n    }\r\n}\r\n\r\nexport const deleteBoardFromStore = (boardId: string): deleteBoardFromStoreType => {\r\n    return {\r\n        type: boardsActionsConstants.DELETE_BOARD_FROM_STORE,\r\n        payload: boardId\r\n    }\r\n}\r\n\r\n//THUNK\r\nexport const getBoards = (userId: number | null) => async (dispatch: Dispatch<BoardsActions>) => {\r\n    try {\r\n        const res = await boardsApi.getBoards(userId)\r\n\r\n        if (res.status === 200) {\r\n            dispatch(setBoards(res.data))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const addBoard = (userId: number, nameOfBoard: string) => async (dispatch: Dispatch<BoardsActions>) => {\r\n    const board = {\r\n        id: uuid(),\r\n        boardName: nameOfBoard,\r\n        columns: []\r\n    }\r\n\r\n    const res = await boardsApi.addBoard(userId, board)\r\n\r\n    if (res.status === 200) {\r\n        dispatch(addBoardToStore(board))\r\n    }\r\n}\r\n\r\nexport const deleteBoard = (boardId: string) => async (dispatch: Dispatch<BoardsActions>) => {\r\n    const res = await boardsApi.delBoard(boardId)\r\n\r\n    if (res.status === 200) {\r\n        dispatch(deleteBoardFromStore(boardId))\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport {Link} from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport {IBoard} from \"../../../redux/types/board\";\r\n\r\ntype BoardSnippetProps = {\r\n    board: IBoard,\r\n    delBoardHandler: (boardId: string) => void,\r\n}\r\n\r\nconst BoardSnippet: React.FC<BoardSnippetProps> = ({board,delBoardHandler}) => {\r\n    return <div>\r\n        <span onClick={() => delBoardHandler(board.id)}>delete</span>\r\n        <Link to={`/boards/${board.id}`}>\r\n            <Board>\r\n                {board.boardName}\r\n            </Board>\r\n        </Link>\r\n    </div>\r\n}\r\n\r\nexport default BoardSnippet\r\n\r\nconst Board = styled.div`\r\n    padding: 10px;\r\n    width: 200px;\r\n    color: grey;\r\n    height: 120px;\r\n    background: white;\r\n    border: 1px solid lightgrey;\r\n    border-radius: 20px;\r\n    transition: 1s;\r\n    \r\n    &:hover {\r\n        transform: scale(1.03);\r\n    }\r\n`\r\n","import React, {useEffect, useState} from \"react\"\r\nimport styled from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {H2} from \"../StyledComponents/StyledComponents\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport {addBoard, deleteBoard, getBoards} from \"../../redux/actions/boards\";\r\nimport BoardSnippet from \"./BoardSnippet/BoardSnippet\";\r\n\r\nconst BoardList = () => {\r\n    const userId = useSelector(state => state.auth.userId)\r\n    const boards = useSelector(state => state.boards.boards)\r\n    const [isModalOpen, setModalOpen] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getBoards(userId))\r\n    }, [userId, dispatch])\r\n\r\n    const delBoardHandler = (boardId) => {\r\n        dispatch(deleteBoard(boardId))\r\n    }\r\n\r\n    const addBoardHandler = (nameOfBoard) => {\r\n        if (nameOfBoard !== '') {\r\n            dispatch(addBoard(userId, nameOfBoard))\r\n            setModalOpen(false)\r\n        }\r\n    }\r\n\r\n    return <Container>\r\n        <Modal addBoard={addBoardHandler} isModalOpen={isModalOpen} setModalOpen={setModalOpen}/>\r\n        <NavBar>\r\n            <H2 pointer>Все доски</H2>\r\n            <Link to={\"/\"}>Главная страница</Link>\r\n            <H2 pointer onClick={() => setModalOpen(true)}>Создать доску</H2>\r\n        </NavBar>\r\n        <BoardsContainer>\r\n            {\r\n                boards\r\n                    ? boards.map((board) => {\r\n                            return <BoardSnippet\r\n                                key={board.id}\r\n                                board={board}\r\n                                delBoardHandler={delBoardHandler}\r\n                            />\r\n                        })\r\n                    : <div>Досок нету</div>\r\n            }\r\n        </BoardsContainer>\r\n    </Container>\r\n}\r\nexport default BoardList\r\n\r\nconst BoardsContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n    grid-gap: 10px;\r\n`\r\n\r\nconst Link = styled(NavLink)`\r\n    text-decoration: none;\r\n    color: black;\r\n    font-size: 20px;\r\n    font-weight: 300;\r\n`\r\n\r\nconst Container = styled.div`\r\n    width: 90%;\r\n    margin: 50px auto;\r\n    display: flex;\r\n`\r\n\r\nconst NavBar = styled.nav`\r\n    padding-left: 50px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    height: 100%;\r\n    width: 20%;\r\n`\r\n","import {Route, Switch} from \"react-router-dom\";\nimport Registration from \"./components/Registration/Registration\";\nimport Login from \"./components/Login/Login\";\nimport {useDispatch} from \"react-redux\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport React, {useEffect} from \"react\";\nimport styled from \"styled-components\";\nimport HomePage from \"./components/HomePage/HomePage\";\nimport Boards from \"./components/Boards/Boards\";\nimport BoardList from \"./components/BoardsList/BoardList\";\nimport {authMe} from \"./redux/actions/auth\";\nimport {useHistory} from 'react-router-dom'\nimport {getBoards} from \"./redux/actions/boards\";\nimport {useTypedSelector} from \"./hooks/useTypedSelector\";\n\nconst App: React.FC = () =>{\n    const userId = useTypedSelector(state => state.auth.userId)\n    const isAuth = useTypedSelector(state => state.auth.isAuth)\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        dispatch(authMe())\n        dispatch(getBoards(userId))\n        history.push(\"/boardsList\")\n    }, [dispatch, history, userId])\n\n    return (\n        <AppWrap>\n            <NavBar />\n            <Switch>\n                {\n                    isAuth\n                        ?   <Switch>\n                            <Route path={\"/boardsList\"} exact component={BoardList} />\n                            <Route path={\"/boards/:id\"} exact component={Boards} />\n                        </Switch>\n                        :   <Switch>\n                            <Route path={\"/registration\"} exact component={Registration}/>\n                            <Route path={\"/login\"} exact component={Login}/>\n                            <Route path={\"/\"} component={HomePage} />\n                        </Switch>\n                }\n            </Switch>\n        </AppWrap>\n    );\n}\nexport default App;\n\nconst AppWrap = styled.div`\n    height: 100vh; \n    background: white;\n`\n","import {BoardsActions, boardsActionsConstants, BoardsState} from \"../types/board\";\r\n\r\nconst initialState: BoardsState = {\r\n    boards: [],\r\n}\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsActions): BoardsState => {\r\n    switch (action.type) {\r\n        case boardsActionsConstants.SET_BOARDS:\r\n            return {\r\n                ...state,\r\n                boards: action.payload\r\n            }\r\n        case boardsActionsConstants.ADD_BOARD_TO_STORE:\r\n            return {\r\n                ...state,\r\n                boards: [...state.boards, action.payload]\r\n            }\r\n        case boardsActionsConstants.DELETE_BOARD_FROM_STORE:\r\n            return {\r\n                ...state,\r\n                boards: state.boards.filter(el => el.id !== action.payload)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {AuthActions, authActionsConstants, AuthState} from \"../types/auth\"\r\n\r\nconst initialState: AuthState = {\r\n    isAuth: false,\r\n    userId: null,\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActions): AuthState => {\r\n    switch (action.type) {\r\n        case authActionsConstants.SET_USER_ID:\r\n            return {\r\n                ...state,\r\n                userId: action.payload,\r\n            }\r\n        case authActionsConstants.IS_AUTH_TOGGLE:\r\n            return {\r\n                ...state,\r\n                isAuth: action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {CurBoardActions, curBoardActionsConstants, CurBoardState} from \"../types/curBoard\";\r\n\r\nconst initialState: CurBoardState = {\r\n    columns: [],\r\n    boardName: ''\r\n}\r\n\r\nexport const curBoardReducer = (state = initialState, action: CurBoardActions): CurBoardState => {\r\n    switch (action.type) {\r\n        case curBoardActionsConstants.DELL_TASK:\r\n            const newColsAfterDel = state.columns.map(el => {\r\n                if (el.id === action.payload.columnId) {\r\n                    el.tasks = el.tasks.filter(el => el.id !== action.payload.taskId)\r\n                }\r\n                return el\r\n            })\r\n            return {\r\n                ...state,\r\n                columns: newColsAfterDel\r\n            }\r\n        case curBoardActionsConstants.ADD_TASK:\r\n            const newColsAfterAdd = state.columns.map(el => {\r\n                if (el.id === action.payload.columnId) {\r\n                    el.tasks.push(action.payload.task)\r\n                }\r\n                return el\r\n            })\r\n            return {\r\n                ...state,\r\n                columns: newColsAfterAdd\r\n            }\r\n        case curBoardActionsConstants.SET_CUR_BOARD:\r\n            return {\r\n                ...state,\r\n                columns: action.payload.columns,\r\n                boardName: action.payload.boardName\r\n            }\r\n        case curBoardActionsConstants.ADD_COL:\r\n            return {\r\n                ...state,\r\n                columns: [...state.columns, action.payload.col]\r\n            }\r\n        case curBoardActionsConstants.DEL_COL: {\r\n            return {\r\n                ...state,\r\n                columns: state.columns.filter(el => el.id !== action.payload)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","// import {curTaskActionsConstants} from \"../actions/auth\";\r\n\r\nimport {CurTaskState} from \"../types/curTask\";\r\n\r\nconst initialState: CurTaskState = {\r\n    taskInfo: []\r\n}\r\n\r\nexport const curTaskReducer = (state = initialState, action: any): CurTaskState => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {boardsReducer} from \"./boardsReducer\";\r\nimport {authReducer} from \"./authReducer\";\r\nimport {curBoardReducer} from \"./curBoardReducer\";\r\nimport {curTaskReducer} from \"./curTaskReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    boards: boardsReducer,\r\n    auth: authReducer,\r\n    curBoard: curBoardReducer,\r\n    curTask: curTaskReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport {rootReducer} from \"./reducers\";\r\nimport thunk from 'redux-thunk'\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {store} from \"./redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}